function [W,CR] = eigenMethodF2(P)
  [V,lamda]=eig(P); %Aρχικά θα επιλέξω την μέγιστη ιδιοτιμή, V: ειναι ο Pairwise comparison πινακας, eig ειναι η συνάρτηση επιστρέφει ιδιοτιμη και ιδιοδιανύσματα, επισης το [V, lambda] στο Lamba θα βαλει ιδιοτιμες και το V ιδιοδιανυσματα (αν πχ εχω 3 ιδιοτιμες εχω και 3 ιδιοδιανυσματα)
  [nx,ny]=size(lamda); %επιστρέφει μέγεθος πίνακα (πιο συγκεκριμένα την μεταβλητη βάλε στη μεταβλητη nx (πλήθος γραμμων) και ny (πλήθος στηλών)
  L=zeros(nx,1); %αρχικοποιιώ και φτιάχνω πίνακα L και το αρχικοποιώ με μηδενικά με διάσταση nx και 1 στήλη - αυτό είναι είναι ενδιάμεσο βήμα για να αποθηκεύσω ιδιοτιμές του πίνακα

  for i=1:nx %apo 1 mexri nx και δεν βαζω for loop για στηλες αφου εχω μονοδιαστατο (1 στηλη εχουμε μονο απο πανω )
    if imag(lamda(i,i))==0 % (αρχικα (i,i) ειναι διαγωνιοσ [πχ οταν i =1 ειναι στο 1,1 αν ειμαι στο i =2 τοτε ειμαι στο 2,2) -- εαν το φανταστικο μερος του στοιχειο που υπαρχει στο πινακα λ ειναι 0 τοτε επιστρεφεις την τιμη διαγωνιου στον πινακα lamda στην αντιστοιχη θεση το πίνακα L
      L(i)=lamda(i,i); % (αποθηκευονται οι πραγματικες ιδιοτιμες του πινακα lamda (δηλαδη αυτες που εχουμε real part και το Imaginary ειναι ισο με το μηδεν) -- η imag επιστρεφει φανταστικο μερος και αν ειναι 0 τοτε το αποθηκευω στο L(i)
          %μας ενδιαφερουν τις ιδιοτιμες του πραγματικου μερους
          %που αν το τρεξω στην δικια μου περιπτωση που ο πινακα ειναι n = 3 δηλαδη 3 γραμμες 3 στηλες εδω βλεπω μονο μια εχει πραγματικο μέρος δηλαδη 1 γραμμη 1 στηλη αν το τσεκαρω (Σε άλλες περιπτωσεις με μεγαλυτερη διασταση μπορει να εχω περισσοτερες πραγματικου μερους)

    endif
  endfor


  % πως υπολογιζω μέγιστο πινακα -- με την συναρτηση max
   [Lmax,ind]=max(L); %επιστρεφει μέγιστη ιδιοτιμη [Lmax] (maximum eigenvalue) -- εδω επειδη ο πινακα L ειναι μονοδιαστατος παιρνει 1 τιμη εισοδου -- return ind (index) the position of the table L (δηλαδη επιστρεφει και την θεση που βρηκε αυτη τη μεγιστη τιμη) [η γενικα θα επιστρεφει η θεση ή μεγιστη εξαρταται τι θελω] εδω επιστρεφω και τα 2.
%πχ ̀>> K = [3 4 2];
%>>[Kmax, index]=max(K)
%Kmax = 4
%index = 2



   W = abs(V(:,ind)/sum(V(:,ind))); %abs(απολυτο της τιμης) -- αυτο που γινεται ενα (διανυσμα) πινακα W που θα εχει ιδια διασταση με το V(:,ind) διαιρεται με το αθροισμα όλων των τιμών του ιδιοδιανύσματος

   n = nx; %Οπου n βάλε nx γιατι μετα ειναι Lmax - nx γιαυτο το βαλα απο πριν n= nx
   CI=(Lmax-n)/(n-1);

   N=[3 4 5 6 7 8 9 10]; %το 1 και το 2 δεν το βαζουμε αφου ειναι 0 το RI τους
   RI=[0.52 0.89 1.11 1.25 1.25 1.4 1.45 1.49];



   for i=1:length(N) % τρεξε απο i μέχρι το μηκος του πινακα Ν
      if n==N(i) % αν το n μικρό (δηλαδη η διασταση για το συγκεκριμενο προβλημα) ειναι ισο με το καποιο σημειο στο πινακα (ψαχνεις αν ειναι ιση η διασταση του pairwise ειναι ιση με καποια θεση του N πινακα )
        CR=CI/RI(i); %τοτε αν ισχυει αυτο διαιρεις το CI Με το RI (δηλαδη το RI η θεση στο Pairwise Matrix ειναι ιση στο πινακα Ν (πχ στην θεση 3η)
      elseif n==1 || n==2 % αλλιως αν n == 1 ή με n==2 τοτε CR = 0 και δεν ισχυει η συνεπεια (πρεπει να ειναι CR <= 0.1 [δες και διαφανεια οτι το είναι ίσο με 0 αν είναι θεση 1 ή 2)
        CR=0;
      end
   end %eof for

%{
 if CR > 0.1
    disp('Inconsistent pairwise comparison matrix. Results rejected.');
    W = []; % Clear weights
 end
end
[P, CR] = pairwise_f(S, n);
 Κλήση της συνάρτησης eigenmethod
[W, CR] = eigenmethodF2(P);
%}

%{
if ~isempty(W)
  disp('Pairwise Comparison Matrix:');
  % Εκτύπωση των βαρών και του δείκτη συνέπειας
  disp('Weights:');
  disp(W);

  disp('Consistency Ratio:');
  disp(CR);

%}
end
